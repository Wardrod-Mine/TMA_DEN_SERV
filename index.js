import express from "express";
import fetch from "node-fetch";
import { Telegraf } from "telegraf";

const BOT_TOKEN     = (process.env.BOT_TOKEN || "").trim();
const SERVER_URL    = (process.env.SERVER_URL || "").trim();        // https://tma-den-serv.onrender.com
const WEBHOOK_PATH  = "/tg-webhook";
const SECRET_TOKEN  = (process.env.SECRET_TOKEN || "").trim();      // —Ç–≤–æ–π —Å–µ–∫—Ä–µ—Ç –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤
const CHANNEL_ID    = (process.env.CHANNEL_ID || "").trim();        // @den_customs
const FRONT_URL     = (process.env.FRONT_URL || "").trim();
const ADMIN_CHAT_IDS = (process.env.ADMIN_CHAT_IDS || "")
  .split(",").map(s => s.trim()).filter(Boolean);

if (!BOT_TOKEN) throw new Error("BOT_TOKEN is required");
if (!SERVER_URL.startsWith("https://")) throw new Error("SERVER_URL must be https");

const app = express();
const bot = new Telegraf(BOT_TOKEN, { handlerTimeout: 9000 });

// --- –ö–æ–º–∞–Ω–¥—ã ---
bot.start(ctx => ctx.replyWithHTML(
  "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é Telegram. –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä–∏—Å–ª–∞—Ç—å /publish."
));
bot.command("id", ctx => ctx.reply(String(ctx.chat.id)));

bot.command("publish", async (ctx) => {
  if (!ADMIN_CHAT_IDS.includes(String(ctx.from.id))) {
    return ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.");
  }
  if (!CHANNEL_ID || !FRONT_URL) return ctx.reply("CHANNEL_ID –∏–ª–∏ FRONT_URL –Ω–µ –∑–∞–¥–∞–Ω—ã");

  const postText = `üî• <b>–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –æ–Ω–ª–∞–π–Ω ‚Äî –≤—Å—ë –≤ –æ–¥–∏–Ω –∫–ª–∏–∫!</b>

üöó –ß–∏–ø-—Ç—é–Ω–∏–Ω–≥ –∏ –¥–æ–æ—Å–Ω–∞—â–µ–Ω–∏–µ
‚öôÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤
üõ† –†–µ–º–æ–Ω—Ç –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
üì≤ –û–Ω–ª–∞–π–Ω-–∑–∞—è–≤–∫–∞ –ø—Ä—è–º–æ –≤ Telegram

–û—Ç–∫—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥ –∏ –æ—Ñ–æ—Ä–º–∏ –∑–∞—è–≤–∫—É –∑–∞ 1 –º–∏–Ω—É—Ç—É üëá`;

  try {
    await ctx.telegram.sendMessage(CHANNEL_ID, postText, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
      reply_markup: { inline_keyboard: [[{ text: "–ö–∞—Ç–∞–ª–æ–≥", web_app: { url: FRONT_URL } }]] }
    });
    return ctx.reply("–ü–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.");
  } catch (e) {
    return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç: " + (e.description || e.message));
  }
});

// --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (—Å–µ–∫—Ä–µ—Ç —É–∂–µ .trim()) ---
const setWebhook = async () => {
  const url = `${SERVER_URL}${WEBHOOK_PATH}`;
  await bot.telegram.setWebhook(url, { secret_token: SECRET_TOKEN });
  console.log("Webhook set:", url);
};

// --- –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ ---
app.use(WEBHOOK_PATH, (req, res) => {
  const got = (req.get("x-telegram-bot-api-secret-token") || "").trim();
  console.log("[webhook] got=", JSON.stringify(got), " expected=", JSON.stringify(SECRET_TOKEN));
  if (SECRET_TOKEN && got !== SECRET_TOKEN) return res.sendStatus(403);
  return bot.webhookCallback(WEBHOOK_PATH)(req, res);
});

// --- health/diag ---
app.get("/diag", async (req, res) => {
  try {
    const me  = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getMe`).then(r=>r.json());
    const wh  = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`).then(r=>r.json());
    res.json({ ok:true, me, wh });
  } catch (e) { res.status(500).json({ ok:false, error:e.message }); }
});

// --- —Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ ---
const PORT = process.env.PORT || 10000;
app.listen(PORT, async () => {
  console.log("Server running on", PORT);
  await setWebhook();
});



